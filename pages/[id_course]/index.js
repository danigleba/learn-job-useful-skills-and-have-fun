import Head from "next/head"
import Router, { useRouter } from "next/router"
import { useState, useEffect, Fragment} from "react"
import Image from "next/image"
import axios from "axios"
import YouTube from 'react-youtube'
import { Dialog, Transition } from '@headlessui/react'
import Navbar from '@/components/Navbar'
import Footer from '@/components/Footer'

export default function Id() {
    const router = useRouter()
    const { id_course } = router.query
    const [course, setCourse] = useState({})
    const [email, setEmail] = useState("")
    const [password, setPassword] = useState("")
    const [activeStep, setActiveStep] = useState(0)
    const [quiz, setQuiz] = useState({})
    const [isOpen, setIsOpen] = useState(false)
    const [videoKey, setVideoKey] = useState("")
    const courseLenght = course && course.steps && course.steps.length

    const [answColor, setAnswColor] = useState("")
    const botton_style = `focus:${answColor} w-full h-full bg-[#EDEFF2] hover:bg-[#1A1C1F] hover:text-white  font-bold py-4 px-4 text-center rounded`

    //Video loading + video responsive
    const [videoWidth, setVideoWidth] = useState("")
    const [videoHeight, setVideoHeight] = useState("")

    const [screenWidth, setScreenWidth] = useState(null);
    const [screenBreackpoint, setScreenBreackpoint] = useState("")

    useEffect(() => {
      handleGetUser()
      const handleResize = () => {
        setScreenWidth(window.innerWidth);
      }
      setScreenWidth(window.innerWidth);
      window.addEventListener('resize', handleResize)
      return () => {
        window.removeEventListener('resize', handleResize)
      };
    }, []);
  
    useEffect(() => {
      if (screenWidth && screenWidth < 768) {
        setScreenBreackpoint("sm")
        setVideoWidth(screenWidth - 40)
        setVideoHeight((screenWidth - 40) / (16/9))
        setVideoKey(videoKey + 1)
      } else if (768 < screenWidth && screenWidth < 1024) {
        setScreenBreackpoint("md")
      } else {
        setScreenBreackpoint("lg")
      }
    }, [screenWidth]);

    useEffect(() => {
      if (screenBreackpoint == "sm") {
        setVideoWidth(screenWidth - 40)
        setVideoHeight((screenWidth - 40) / (16/9))
        setVideoKey(videoKey + 1)
      } else if (screenBreackpoint == "md") {
        setVideoWidth("625")
        setVideoHeight("351.5625")
        setVideoKey(videoKey + 1)
      } else if (screenBreackpoint == "lg") {
        setVideoWidth("700")
        setVideoHeight("393.75")
        setVideoKey(videoKey + 1)
      }

    }, [screenBreackpoint]);

    const videoOpts = {
        width: videoWidth,
        height: videoHeight,
        playerVars: {
          start: course && course.steps && course.steps[activeStep] && course.steps[activeStep].video.start_time, 
          end: course && course.steps && course.steps[activeStep] && course.steps[activeStep].video.end_time,
          controls: 0,
          showinfo: 0,
          rel: 0,
          disablekb: 1,
          iv_load_policy: 0,
          modestbranding: 1,
          showinfo: 0 
        },
      };

    //Quiz
    function getQuiz() {
        if (!id_course) {
            return
        }
        var url = "/api/quizzes/getQuiz?id_course=" + id_course
        fetch(url)
          .then(response => response.json())
          .then(data => setQuiz(data.data))
    }

    function goIndex() {
        router.push("/")
    }

    const handleGetUser = async () => {  
        const credentials = { email, password } 
        const user = await axios.post("/api/auth/checkAuth", credentials)
        if (user.data.message == "Cookie not found") {
          Router.push("/login")
        }
    }

    useEffect(() => {
        getQuiz()
        if (!id_course) {
            return
        }
        var url = "/api/courses/getCourse?id_course=" + id_course
        fetch(url)
          .then(response => response.json())
          .then(data => setCourse(data.course))
    }, [id_course])

    useEffect(() => {
        if ((activeStep +1) > courseLenght) {
            router.push(`/${id_course}/outro`)
        }}, [activeStep])
    
    function closeModal() {
        setIsOpen(false)
      }
    
      function openModal() {
        setIsOpen(true)

      }

      const getAnswer = (e) => {
        if (e.target.value == "true") {
            setIsOpen(false)
            setAnswColor("bg-green-400")
            console.log(answColor)
            setTimeout(() => {
                window.scrollTo(0, 0);
                setActiveStep(activeStep + 1)
                setVideoKey(videoKey + 1)
                
              }, 300)
        } else {
            setAnswColor("bg-red-400")
            console.log(answColor)
        }
    }
    return (
        <>
            <Head>
                <title>Kualify</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/icon.png" />
            </Head>    
            <main className="text-center">
            <Navbar />
                <div className="justify-center pt-12">
                    <div className="pl-10 pr-10 pb-6">
                        {course.tags?.map(item => (
                            <a key={item}>
                               <div className="inline-block pb-4 text-gray-800">
                                  <p className="font-semibold py-1.5 px-6 badge rounded-md bg-[#1A1C1F] cursor-pointer text-white">{item}</p>
                                </div>
                            </a>))} 
                        <h2 className="text-4xl font-bold content-center text-gray-800">{course.title}</h2>
                        <h2 className="text-xl text-gray-800 font-semibold pt-4">{activeStep + 1}. {course && course.steps && course.steps[activeStep] && course.steps[activeStep].title}</h2>
                    </div>
                    <div className="justify-center p-6 flex md:gap-8">
                        <div className="rounded-lg overflow-hidden sm:w-max shadow-md">
                            <YouTube key={videoKey} opts={videoOpts} videoId={course && course.steps && course.steps[activeStep] && course.steps[activeStep].video.url}/>
                        </div>
                    </div>
                    <div className="pb-16 pt-6 mx-4">
                        <button className="bg-[#1A1C1F] text-white w-full px-6 sm:w-96 py-3 rounded-md hover:bg-[#2C3036] font-bold shadow-md" onClick={openModal}>Continuar</button>
                    </div>
                        <Transition appear show={isOpen} as={Fragment}>
                            <Dialog as="div" className="relative z-10" onClose={closeModal}>
                            <Transition.Child
                                as={Fragment}
                                enter="ease-out duration-300"
                                enterFrom="opacity-0"
                                enterTo="opacity-100"
                                leave="ease-in duration-200"
                                leaveFrom="opacity-100"
                                leaveTo="opacity-0"
                            >
                                <div className="fixed inset-0 bg-black bg-opacity-25" />
                            </Transition.Child>

                            <div className="fixed inset-0 overflow-y-auto w-full ">
                                <div className="flex min-h-full items-center justify-center p-4 text-center">
                                <Transition.Child
                                    as={Fragment}
                                    enter="ease-out duration-300"
                                    enterFrom="opacity-0 scale-95"
                                    enterTo="opacity-100 scale-100"
                                    leave="ease-in duration-200"
                                    leaveFrom="opacity-100 scale-100"
                                    leaveTo="opacity-0 scale-95"
                                >
                                    <Dialog.Panel className="sm:w-full md:w-1/2 wtransform overflow-hidden rounded-2xl bg-white p-6 text-left align-middle transition-all">
                                        <Dialog.Title
                                            as="h5"
                                            className="text-xl font-semibold leading-6 text-[#1A1C1F] text-center pt-2"
                                        >
                                            Antes de continuar...
                                        </Dialog.Title>
                                        
                                            <div className="pt-2">
                                                <h2 className="text-center text-2xl font-bold  pt-4">{quiz && quiz.questions && quiz.questions[activeStep] && quiz.questions[activeStep].title}</h2>
                                            </div>
                                            <div className="justify-center text-[#1A1C1F]">
                                                <div className="grid content-center grid-cols-2 mx-2 pt-12">
                                                    <div className="p-2 pl-0 text-right">
                                                        <button 
                                                        onClick={getAnswer}
                                                        value={quiz && quiz.questions && quiz.questions[activeStep] && quiz.questions[activeStep].answers && quiz.questions[activeStep].answers[0] && quiz.questions[activeStep].answers[0].value}
                                                        className={botton_style}>{quiz && quiz.questions && quiz.questions[activeStep] && quiz.questions[activeStep].answers && quiz.questions[activeStep].answers[0].title}</button>
                                                    </div>
                                                    <div className="p-2 pr-0 text-left">
                                                        <button 
                                                        onClick={getAnswer}
                                                        value={quiz && quiz.questions && quiz.questions[activeStep] && quiz.questions[activeStep].answers && quiz.questions[activeStep].answers[1] && quiz.questions[activeStep].answers[1].value}
                                                        className={botton_style}>{quiz && quiz.questions && quiz.questions[activeStep] && quiz.questions[activeStep].answers && quiz.questions[activeStep].answers[1].title}</button>
                                                    </div>
                                                    <div className="p-2 pl-0 text-right">
                                                        <button 
                                                        onClick={getAnswer}
                                                        value={quiz && quiz.questions && quiz.questions[activeStep] && quiz.questions[activeStep].answers && quiz.questions[activeStep].answers[2] && quiz.questions[activeStep].answers[2].value}                                                        
                                                        className={botton_style}>{quiz && quiz.questions && quiz.questions[activeStep] && quiz.questions[activeStep].answers && quiz.questions[activeStep].answers[2].title}</button>
                                                    </div>
                                                    <div className="p-2 pr-0 text-left">
                                                        <button 
                                                        onClick={getAnswer}
                                                        value={quiz && quiz.questions && quiz.questions[activeStep] && quiz.questions[activeStep].answers && quiz.questions[activeStep].answers[3] && quiz.questions[activeStep].answers[3].value}                                                           
                                                        className={botton_style}>{quiz && quiz.questions && quiz.questions[activeStep] && quiz.questions[activeStep].answers && quiz.questions[activeStep].answers[3].title}</button>
                                                    </div>
                                                </div>
                                            </div>       
                                    </Dialog.Panel>
                                </Transition.Child>
                                </div>
                            </div>
                            </Dialog>
                        </Transition>
                </div>
                <Footer />
            </main>
        </>
    )
}

